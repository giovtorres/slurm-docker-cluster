#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of oversubscribe and contiguous options, also uses --hold option.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "$test_dir/input"
set force_part  0
set job_id      0

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

set oversubscribe [partition_oversubscribe]
if {$oversubscribe eq "FORCE"} {
	set force_part 1
}

#
# Delete left-over input script
# Build input script file
#
exec $bin_rm -f $file_in
make_bash_script $file_in "
  $bin_sleep 10
"

#
# Spawn a sbatch job with oversubscribe option only
#
set job_id [submit_job -fail "--oversubscribe --hold -t1 $file_in"]

#
# Confirm oversubscribe and contiguous flag values
#
set matches 0
spawn $scontrol show job $job_id
expect {
	-re "OverSubscribe=YES" {
		incr matches
		exp_continue
	}
	-re "Contiguous=($number)" {
		set cont_val $expect_out(1,string)
		if {$cont_val == 0} {
			incr matches
		}
		exp_continue
	}
	timeout {
		fail "scontrol not responding"
	}
	eof {
		wait
	}
}
subtest {$matches == 2} "Confirm oversubscribe and contiguous flag values" "$matches != 2"
cancel_job -fail $job_id

#
# Spawn a sbatch job with contiguous option only
#
set job_id  [submit_job -fail "--contiguous --hold -t1 $file_in"]

#
# Confirm oversubscribe and contiguous flag values
#
set match_oversubscribe 0
set match_cont  0
spawn $scontrol show job $job_id
expect {
	-re "OverSubscribe=NO" {
		set match_oversubscribe 1
		exp_continue
	}
	-re "OverSubscribe=OK" {
		set match_oversubscribe 1
		exp_continue
	}
	-re "Contiguous=($number)" {
		set cont_val $expect_out(1,string)
		if {$cont_val == 1} {
			set match_cont 1
		}
		exp_continue
	}
	timeout {
		fail "scontrol not responding"
	}
	eof {
		wait
	}
}
subtest {$match_cont == 1} "Confirm contiguous flag value" "$match_cont != 1"
subtest {$force_part != 0 || $match_oversubscribe == 1} "Confirm oversubscribe flag value"
cancel_job -fail $job_id
