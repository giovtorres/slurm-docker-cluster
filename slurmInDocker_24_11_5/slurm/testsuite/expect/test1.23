#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Verify node configuration specification (--mem, --mincpus, and
#          --tmp options).
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

#
# Submit a job with invalid mincpus requirement
#
set err_msg	0
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --mincpus=999999 -t1 $bin_date
expect {
	-re "configuration is not available" {
		log_debug "This error is expected, no worries"
		set err_msg 1
		exp_continue
	}
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$this_date eq ""} "Job should not run with invalid mincpus option"
subtest {$err_msg == 1} "Job should report required error"

#
# Submit a job with valid mincpus requirement
#
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --mincpus=1 -t1 $bin_date
expect {
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	#needed for cray systems that don't have a prefix
	-re "($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$this_date ne ""} "Job should run with valid mincpus option"

#
# Submit a job with invalid mem requirement
#
set err_msg	0
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --mem=999999 -t1 $bin_date
expect {
	-re "not available" {
		log_debug "This error is expected, no worries"
		set err_msg 1
		exp_continue
	}
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$this_date eq ""} "Job should not run with invalid mem option"
subtest {$err_msg == 1} "Job should report required error"

#
# Submit a job with what should be valid mem requirement.
#
# We can't set --mem=1 or the job will abort for lack of memory,
# so we just use a small value that should be valid if the node
# is properly configured.
#
set err_msg	0
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --mem=10 -t1 $bin_date
expect {
	-re "not available" {
		log_debug "This error is not unexpected, no worries"
		set err_msg 1
		exp_continue
	}
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	#needed for cray systems that don't have a prefix
	-re "($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$err_msg != 0 || $this_date ne ""} "Job should run with valid mem option"

#
# Submit a job with invalid tmp requirement
#
set err_msg	0
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --tmp=999999999 -t1 $bin_date
expect {
	-re "configuration is not available" {
		log_debug "This error is expected, no worries"
		set err_msg 1
		exp_continue
	}
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$this_date eq ""} "Job should not run with invalid tmp option"
subtest {$err_msg == 1} "Job should report required error"

#
# Submit a job with valid tmp requirement
#
set this_date	""
set timeout	$max_job_delay
spawn $srun -N1 -l --tmp=0 -t1 $bin_date
expect {
	-re "0: *($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	#needed for cray systems that don't have a prefix
	-re "($re_word_str)" {
		set this_date $expect_out(1,string)
		exp_continue
	}
	timeout {
		fail "srun not responding"
	}
	eof {
		wait
	}
}

subtest {$this_date ne ""} "Job should run with valid tmp option"
