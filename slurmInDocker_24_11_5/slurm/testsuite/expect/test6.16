#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test scancel of multiple job steps (job.step specification).
#
# Note:    This script generates and then deletes files in the working directory
#          named test6.16.input
############################################################################
# Copyright (C) SchedMD LLC.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "$test_dir/input"
set job_id      0

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

#
# Build input script file
#
make_bash_script $file_in "
  $srun -N1 -n1 --overlap --mem=10 $bin_sleep $max_job_delay &
  $srun -N1 -n1 --overlap --mem=10 $bin_sleep $max_job_delay &
  $srun -N1 -n1 --overlap --mem=10 $bin_sleep $max_job_delay
"

#
# Spawn sbatch job
#
set job_id [submit_job -fail "-n3 --mem=30 --output=/dev/null --error=/dev/null --job-name=job.$test_id -t5 $file_in"]

wait_for_job -fail $job_id RUNNING
# Wait for job steps to begin
wait_for_command_match -fail -pollinterval .1 "$sstat --allsteps --format JobID --noheader $job_id" "$job_id\.2"

#
# Kill single job steps individually
#
set matches 0
spawn $scancel --interactive $job_id.0 $job_id.1 $job_id.2
expect {
	-re "Cancel step_id=$job_id\\.0*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel step_id=$job_id\\.1*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "Cancel step_id=$job_id\\.2*\? " {
		send "y\r"
		incr matches
		exp_continue
	}
	-re "error:" {
		fail "scancel had an unexpected error"
	}
	timeout {
		fail "scancel not responding"
	}
	eof {
		wait
	}
}
if {$matches != 3} {
	fail "scancel with multiple step_id failed"
}
