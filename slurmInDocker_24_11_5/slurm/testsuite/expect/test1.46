#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of srun's --kill-on-bad-exit option.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_prog   "$test_dir/program"

#
# Build input script file
#
# We have the last of the tasks exit.  proctrack/linuxproc will not
# signal processes named "slurmstepd" and later user tasks could still
# be named "slurmstepd" when the termination signal comes in.
#
set fd [open "$file_prog.c" w]
puts $fd {
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
{
    char *id = getenv("SLURM_PROCID");
    if (atoi(id) == 9) {
        exit(2);
    }
    sleep(15);
    printf("SHOULD_NOT_BE_HERE\n");
}
}
close $fd
# Add delay due to sporatic error "Clock skew detected"
wait_for_file -fail ${file_prog}.c
run_command -fail "$bin_cc -O -o $file_prog ${file_prog}.c"
run_command -fail "$bin_chmod 700 $file_prog"

#
# Spawn a shell via srun and send exit command to task 1 only
#
set timeout $max_job_delay
log_debug "The following command is expected to report errors."
set output [run_command_output -xfail -fail "$srun -n10 -N1 -O --kill-on-bad-exit -t1 $file_prog"]
subtest {[regexp "exit code 2" $output] == 1} "Verify exit code is 2"
subtest {![regexp "SHOULD_NOT_BE_HERE" $output]} "Verify step is killed"
