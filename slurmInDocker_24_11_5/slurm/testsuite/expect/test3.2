#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Validate scontrol update command for partitions.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set part_name      [default_partition]
set part_old_state [get_partition_param $part_name "State"]
set timeout        $max_job_delay

if {![is_super_user]} {
	skip "Test needs admin to update partition state"
}

proc cleanup {} {
	reconfigure
}

# Execute a srun job in the specified partition name
# Returns true if srun timedout with a DOWN state message, false otherwise
proc check_part_down { part_name } {
	global bin_true srun timeout max_job_delay
	set matches  0
	set timedout false

	set timeout 5
	set srun_pid [spawn $srun -p$part_name -N1 -t1 $bin_true]
	expect {
		-re "DOWN state" {
			incr matches
			exp_continue
		}
		-re "queued and waiting" {
			incr matches
			exp_continue
		}
		timeout {
			if {$matches == 2} {
				set timedout true
			}
			slow_kill $srun_pid
		}
		eof {
			log_error "srun didn't timeout"
			wait
		}
	}

	set timeout $max_job_delay
	return $timedout
}

#
# Validate current partition information
#
if {$part_name eq ""} {
	fail "scontrol unable to identify any partition"
}
if {$part_old_state eq ""} {
	fail "scontrol unable to identify state of partition ($part_name)"
}

#
# Change that partition's state to DOWN
#
run_command -fail "$scontrol update PartitionName=$part_name State=DOWN"
set read_state [get_partition_param $part_name "State"]
subtest {$read_state eq "DOWN"} "scontrol should be able to change the partition state"

#
# Confirm that a DOWN partition does not run any jobs
#
subtest {[check_part_down $part_name]} "Job should not run. srun should timeout with the partition DOWN messages"

#
# Confirm that we can set MaxCpusPerSocket
#
run_command -fail "$scontrol update PartitionName=$part_name MaxCPUsPerSocket=1"
set read_max_cpus_per_socket [get_partition_param $part_name "MaxCPUsPerSocket"]
subtest {$read_max_cpus_per_socket eq "1"} "scontrol should be able to set MaxCPUsPerSocket"

